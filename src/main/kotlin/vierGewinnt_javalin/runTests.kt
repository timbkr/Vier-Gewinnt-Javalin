package vierGewinnt_javalin

/* Spielt alle 5 Testszenarien durch */
fun runAllTests(game: VierGewinnt, ai: AlphaBeta_Negamax) {
    game.undoAll()
    println("\nTest1 - Spiel-Engine kann im naechsten Zug gewinnen (Sichttiefe 1):")
    initTest(game, testsBoards[0])
    println(game)
    game.makeMove(ai.bestMove(game))
    println("Test-AI-Move (Tiefe1): " + (game.moves[game.counter - 1] + 1))
    println(game)

    game.undoAll()
    println("\nTest2 - Spiel-Engine kann im uebernaechsten Zug gewinnen (Sichttiefe 3)")
    initTest(game, testsBoards[1])
    println(game)
    game.makeMove(ai.bestMove(game))
    println("Test-AI-Move (Tiefe1): " + (game.moves[game.counter - 1] + 1))
    println(game)
    game.makeMove(ai.bestMove(game))
    println("Gegner-AI-Move (Tiefe2): " + (game.moves[game.counter - 1] + 1))
    println(game)
    game.makeMove(ai.bestMove(game))
    println("Test-AI-Move (Tiefe3): " + (game.moves[game.counter - 1] + 1))
    println(game)

    game.undoAll()
    println("\nTest3 - Spiel-Engine kann im ueberuebernaechsten Zug gewinnen (Sichttiefe 5)")
    initTest(game, testsBoards[2])
    println(game)
    game.makeMove(ai.bestMove(game))
    println("Test-AI-Move (Tiefe1): " + (game.moves[game.counter - 1] + 1))
    println(game)
    game.makeMove(ai.bestMove(game))
    println("Gegner-AI-Move (Tiefe2): " + (game.moves[game.counter - 1] + 1))
    println(game)
    game.makeMove(ai.bestMove(game))
    println("Test-AI-Move (Tiefe3): " + (game.moves[game.counter - 1] + 1))
    println(game)
    game.makeMove(ai.bestMove(game))
    println("Gegner-AI-Move (Tiefe4): " + (game.moves[game.counter - 1] + 1))
    println(game)
    game.makeMove(ai.bestMove(game))
    println("Test-AI-Move (Tiefe5): " + (game.moves[game.counter - 1] + 1))
    println(game)
    game.undoAll()

    game.undoAll()
    println("\nTest4 - Spiel-Engine vereitelt eine unmittelbare Gewinnbedrohung des Gegners (Sichttiefe 2)")
    initTest(game, testsBoards[3])
    println(game)
    game.makeMove(ai.bestMove(game))
    println("Test-AI-Move (Tiefe1): " + (game.moves[game.counter - 1] + 1))
    println(game)
    game.makeMove(ai.bestMove(game))
    println("Gegner-AI-Move (Tiefe2): " + (game.moves[game.counter - 1] + 1))
    println(game)
    game.undoAll()

    println("\nTest5 - Spiel-Engine vereitelt ein Drohung, die den Gegner im uebernaechsten Zug ansonsten einen Gewinn umsetzen laesst (Sichttiefe 4)")
    initTest(game, testsBoards[4])
    println(game)
    game.makeMove(ai.bestMove(game))
    println("Test-AI-Move (Tiefe1): " + (game.moves[game.counter - 1] + 1))
    println(game)
    game.makeMove(ai.bestMove(game))
    println("Gegner-AI-Move (Tiefe2): " + (game.moves[game.counter - 1] + 1))
    println(game)
    game.makeMove(ai.bestMove(game))
    println("Test-AI-Move (Tiefe3): " + (game.moves[game.counter - 1] + 1))
    println(game)
    game.makeMove(ai.bestMove(game))
    println("Gegner-AI-Move (Tiefe4): " + (game.moves[game.counter - 1] + 1))
    println(game)
}
